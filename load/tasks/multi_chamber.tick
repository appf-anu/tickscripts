dbrp "chambers"."autogen"

var interval = 10m
var oneday = 18h
var message_dead = '[OFF] {{ .ID }}'
var message_ok = '[OK] {{ .ID }}'
var message_crit = '[CRIT] {{ .ID }} '


var data = stream
  |from()
    .retentionPolicy('autogen')
    .database('chambers')
    .measurement('conviron')
    .groupBy('host')

var temp_diff_window = data
  |window()
    .period(30m)
    .every(5m)
    .fillPeriod()
    .align()
  |eval(lambda: abs("temp_target" - "temp_recorded")) // get abs temperature difference
    .as('temp_diff_window')
  |min('temp_diff_window')
    .as('temp_diff')
  |alert()
    .crit(lambda: "temp_diff" > 2.0) // abs temperature difference shouldnt be over 2
    .id('{{ index .Tags "host" }} spc chamber temperature diff')
    .message('{{ if eq .Level "OK" }}' + message_ok + '{{ else }}' + message_crit + '{{ end }}')
    .details('temp diff: {{ index .Fields "temp_diff" | printf "%.2f" }}')
    .exec('python3', '/etc/kapacitor/python/gitalert.py')
    .stateChangesOnly()

var temp_spread_alert = data
  |where(lambda: "group" == 'spc')
  |window()
    .align()
    .period(oneday)
    .every(interval)
    .fillPeriod()
  |spread('temp_recorded')
    .as('temp_recorded_spread')
  |alert()
    .crit(lambda: "temp_recorded_spread" < 3.0)
    .id('{{ index .Tags "host" }} spc chamber temperature spread')
    .message('{{ if eq .Level "OK" }}' + message_ok + '{{ else }}' + message_crit + '{{ end }}')
    .details('temp spread: {{ index .Fields "temp_recorded_spread" | printf "%.2f" }}')
    .exec('python3', '/etc/kapacitor/python/gitalert.py')
    .stateChangesOnly()

var par_spread_alert = data
  |window()
    .align()
    .period(oneday)
    .every(interval)
    .fillPeriod()
  |spread('par')
    .as('par_spread')
  |alert()
    .crit(lambda: "par_spread" < 5.0)
    .id('{{ index .Tags "host" }} spc par spread')
    .message('{{ if eq .Level "OK" }}' + message_ok + '{{ else }}' + message_crit + '{{ end }}')
    .details('par spread spc: {{ index .Fields "par_spread" | printf "%.2f" }}')
    .exec('python3', '/etc/kapacitor/python/gitalert.py')
    .stateChangesOnly()

var dman = data
  |deadman(0.0, 30m)
    .id('{{ index .Tags "host" }} spc chamber deadman')
    .message('{{ if eq .Level "OK" }}' + message_ok + '{{ else }}' + message_dead + '{{ end }}')
    .exec('python3', '/etc/kapacitor/python/gitalert.py')
    .details('No Data')
    .stateChangesOnly()
