dbrp "capture_server"."autogen"

var interval = 1h
var per = 1h
var message_dead = '[OFF] Gigavision {{ .ID }} NO DATA'
var message_alive = '[OK] Gigavision {{ .ID }} HAS DATA'
var message_total = '[CRIT] Gigavision {{ .ID }} TOTAL DIFF {{ index .Fields "total_images_max" | printf "%.0f"}}'
var message_total_ok = '[OK] Gigavision {{ .ID }} TOTAL DIFF'
var message_timing_expired = '[CRIT] Gigavision {{ .ID }} TIMING EXPIRY'

var data = stream
  |from()
    .database('capture_server')
    .retentionPolicy('autogen')
    .measurement('gigavision')
    .groupBy('name')

var max_total = data
  |window()
    .fillPeriod()
    .align()
    .period(per)
    .every(interval)
  |max('total_images')
    .as('total_images_max')
  |alert()
    .crit(lambda: "total_images_max" <= 1.0)
    .id('{{ index .Tags "name" }} gigavision num images difference')
    .message('{{ if eq .Level "OK" }}' + message_total_ok + '{{ else }}' + message_total + '{{ end }}.')
    .slack()
    .exec('python3', '/home/gareth/tickscripts/gitalert.py')
    .stateChangesOnly()

var timing = data
  |alert()
    .crit(lambda: "timing_total_s" >= 3600.0)
    .id('{{ index .Tags "name" }} gigavision total timing')
    .message(message_timing_expired)
    .slack()

var dman = data
  |deadman(0.0, interval, lambda: hour("time") >= 7 AND hour("time") <= 18)
    .id('{{ index .Tags "name" }} gigavision deadman')
    .message('{{ if eq .Level "OK" }}' + message_alive + '{{ else }}' + message_dead + '{{ end }}.')
    .slack()
    .exec('python3', '/home/gareth/tickscripts/gitalert.py')
    .stateChangesOnly()
