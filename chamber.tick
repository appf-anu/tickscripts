dbrp "chambers"."autogen"

var interval = 10m
var oneday = 18h
var message_dead = '[OFF] Chamber {{ .ID }} NO DATA'
var message_alive = '[OK] Chamber {{ .ID }} HAS DATA'
var message_difference = '[CRIT] Chamber {{ .ID }} TEMP DIFF {{ index .Fields "temp_diff_mean" | printf "%.2f" }}'
var message_difference_ok = '[OK] Chamber {{ .ID }} TEMP DIFF OK'
var message_spread = '[CRIT] Chamber {{ .ID }} SPREAD {{ index .Fields "temp_recorded_spread" | printf "%.2f" }}'
var message_spread_ok = '[OK] Chamber {{ .ID }} SPREAD OK'

var data = stream
  |from()
    .retentionPolicy('autogen')
    .database('chambers')
    .measurement('conviron')
    .groupBy('host')

var temp_diff_alert = data
  |eval(lambda: abs("temp_set" - "temp_recorded"))
    .as('temp_diff')
  |window()
    .fillPeriod()
    .align()
    .period(oneday)
    .every(interval)
  |mean('temp_diff')
    .as('temp_diff_mean')
  |alert()
    .crit(lambda: "temp_diff_mean" > 3.0)
    .id('{{ index .Tags "host" }}')
    .message('{{ if eq .Level "OK" }}' + message_difference_ok + '{{ else }}' + message_difference + '{{ end }}.')
    .slack()
    .exec('python3', '/home/gareth/tickscripts/gitalert.py')
    .stateChangesOnly()

var temp_spread_alert = data
  |window()
    .fillPeriod()
    .align()
    .period(oneday)
    .every(interval)
  |spread('temp_recorded')
    .as('temp_recorded_spread')
  |alert()
    .crit(lambda: "temp_recorded_spread" < 3.0)
    .id('{{ index .Tags "host" }} chamber temperature spread')
    .message('{{ if eq .Level "OK" }}' + message_spread_ok + '{{ else }}' + message_spread + '{{ end }}.')
    .exec('python3', '/home/gareth/tickscripts/gitalert.py')
    .slack()
    .stateChangesOnly()

var dman = data
  |deadman(0.0, interval)
    .id('{{ index .Tags "host" }} chamber deadman')
    .message('{{ if eq .Level "OK" }}' + message_alive + '{{ else }}' + message_dead + '{{ end }}.')
    .slack()
    .exec('python3', '/home/gareth/tickscripts/gitalert.py')
    .stateChangesOnly()
